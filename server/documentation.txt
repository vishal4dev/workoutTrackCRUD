----------------------MERN---------------------
M-mongodb : a no sql database

E-Express : a backend frameWork that is used with nodejs to build APIs 

R-react: this is the front-end
 -> it requests and responds to the APIs

N-nodejs : it is a server side scripting lang used to write code for the server 

->Both Express and nodejs together are used to crate APIs which can fetch data from the database and repond to the frontend.

q. why do we need the backend why cant we directly communicate with the database?
->Doing so will make the data of user very vulnerable as hiding it beihind some logic will make sure the secrecy of the data

-----------------------.env files--------------
A .env file is used to store environment variables.

->Environment variables are key-value pairs that hold important configuration settings and sensitive information, 
such as:
Database connection strings
API keys
Port numbers
Secret keys for authentication

Here's why the .env file is useful:

Security: Sensitive data is not hard-coded into your source code, making it safer.

Configuration: Easy to change settings without modifying the code.

Consistency: Ensures that all team members and deployment environments use the same configuration.

//use
import dotenv from 'dotenv';
dotenv.config();

process.env.codeword: use this variable

-------------------------------------
->Postman is a popular tool used in backend development for testing and managing APIs 

----------------Mongoose-----------------------
->Mongoose is an Object Data Modeling (ODM) library for MongoDB and Node.js. In simpler terms, it provides a way to model your data using JavaScript objects that can be easily stored and retrieved from a MongoDB database.

Features of mongoDB:

Schema-based: Mongoose allows you to define schemas, which are blueprints for your data models. Schemas define the structure of documents within a collection in MongoDB.

Validation: It provides built-in validation for data models, allowing you to enforce rules for the data types, required fields, default values, and more.

Querying: Mongoose simplifies querying MongoDB. It provides a fluent API for building queries and executing operations like find, update, delete, and aggregate.

Middleware: You can define middleware functions (pre and post hooks) in Mongoose to handle operations like validation, logging, encryption, etc., before or after certain events (e.g., saving a document).
**** A little deep dive *****
->Everything in Mongoose starts with a Schema. Each schema maps to a MongoDB collection and defines the shape of the documents within that collection.

->To use our schema definition, we need to convert our blogSchema into a Model we can work with. To do so, we pass it into mongoose.model(modelName, schema)

->By default, Mongoose adds an _id property to your schemas.

-> Models are responsible for creating and reading documents from the underlying MongoDB database.
     When you call mongoose.model() on a schema, Mongoose compiles a model for you.

const schema = new mongoose.Schema({ name: String, size: String });
const Tank = mongoose.model('Tank', schema);

codeEg.
import mongoose from 'mongoose';

const Schema = mongoose.Schema;

const workoutSchema = new Schema({

    title:{
        type: String,
        required: true,
    },
    reps:{
        type: Number,
        required: true,
    },
    
    load:{
        type: Number,
        required: true,
    },
    
},{timestamps: true});//timestamps will automatically add createdAt and updatedAt fields


export default mongoose.model('WorkoutModels', workoutSchema);


-----------------------------------
-> ab humlog do tareh ka folder banate hain ->server
                                            ->client

server-> ab ye folder pe sare backend ka kaam hota hai
      ->so to initialize the server we use npm init -y(this flag will skip all the details the npm will ask for)

      ->now to make our app accept import package from 'package' we must add a key:value in the package.json file as "type":"module"

      ->ab ek ek karke sara dependecy install kr lo

client->

npx create-react-act projectname / ya fir agar usi file me krna hai to: ./


--------
get requests are easier to do as in browser all we do is get request but for delete,post,update requests cannot directly be tested so we'll use postman to test out those apis

--------
keep all the api endpoints or routes in a separate route folder

q.does the (req,res) order matter..YES

-> controllers are the logic behind routes and we create them in different folder and not inside the routes for every route primarily to avoid bloating the routes file


-----------------------------------
**Adding react context(seekho)

-> it is used to make the fontend updation in syn with database

-------
using package datefns